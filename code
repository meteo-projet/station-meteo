
// Include Libraries
#include "Arduino.h"
#include "DHT.h"
#include "LiquidCrystal.h"
#include "Adafruit_BMP280.h"
Adafruit_BMP280 bmp; // I2C Interface


// Pin Definitions
#define DHT_PIN_DATA	2
#define LCD_PIN_RS	8
#define LCD_PIN_E	7
#define LCD_PIN_DB4	3
#define LCD_PIN_DB5	4
#define LCD_PIN_DB6	5
#define LCD_PIN_DB7	6
#define MQ135_5V_PIN_AOUT	A3
#define WATERLEVELSENSOR_5V_PIN_SIG	A1



// Global variables and defines

// object initialization
DHT dht(DHT_PIN_DATA);
LiquidCrystal lcd(LCD_PIN_RS,LCD_PIN_E,LCD_PIN_DB4,LCD_PIN_DB5,LCD_PIN_DB6,LCD_PIN_DB7);


// define vars for testing menu
const int timeout = 10000;       //define timeout of 10 sec
char menuOption = 0;
long time0;
const int read = A1; 
// Setup the essentials for your circuit to work. It runs first every time your circuit is powered with electricity.
void setup() 
{
    // Setup Serial which is useful for debugging
    // Use the Serial Monitor to view printed messages
    Serial.begin(9600);
    while (!Serial) ; // wait for serial port to connect. Needed for native USB
    Serial.println("start");
    
    dht.begin();

  
    // set up the LCD's number of columns and rows
    lcd.begin(16, 2);
    menuOption = menu();
    
    
}
bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
}
// Main logic of your circuit. It defines the interaction between the components you selected. After setup, it runs over and over again, in an eternal loop.
void loop() 
{
    
    
    if(menuOption == '1')
    { Serial.print(F("Pressure = "));
    Serial.print(bmp.readPressure()/100); //displaying the Pressure in hPa, you can change the unit
    Serial.println(" hPa");

    }
    else if(menuOption == '2') {
    // DHT22/11 Humidity and Temperature Sensor - Test Code
    // Reading humidity in %
    float dhtHumidity = dht.readHumidity();
    // Read temperature in Celsius, for Fahrenheit use .readTempF()
    float dhtTempC = dht.readTempC();
    Serial.print(F("Humidity: ")); Serial.print(dhtHumidity); Serial.print(F(" [%]\t"));
    Serial.print(F("Temp: ")); Serial.print(dhtTempC); Serial.println(F(" [C]"));

    }
    else if(menuOption == '3') {
    // LCD 16x2 - Test Code
    // Print a message to the LCD.
   lcd.setCursor(0, 0);
    lcd.print("Station meteo");


    // Turn off the display:
    delay(500);
    // Turn on the display:
    lcd.display();
    delay(500);

      lcd.setCursor(0, 1);
    lcd.print("temp: ");
  lcd.print(dhtTempC,°C);

  lcd.setCursor(8, 1);
    lcd.print("/hum: ");
  lcd.print(dhtHumidity,%);

    // Turn off the display:
    delay(500);
    // Turn on the display:
    lcd.display();
    delay(500);

    }
    else if(menuOption == '4')
    {
       sensorValue = analogRead(3);       // read analog input pin 0
       Serial.print("AirQua=");
       Serial.print(sensorValue, DEC);               // prints the value read
       Serial.println(" PPM");
    }
    else if(menuOption == '5')
    {
     float value = analogRead(read); //Read data from analog pin and store it to value variable
  
     if (value<=480){ 
        Serial.println("Pas de précipitation"); 
     }
     else if (value>480 ){ 
        Serial.println(" précipitation"); 
    }

    }
    
    if (millis() - time0 > timeout)
    {
        menuOption = menu();
    }
    
}



// Menu function for selecting the components to be tested
// Follow serial monitor for instrcutions
char menu()
{

    Serial.println(F("\nWhich component would you like to test?"));
    Serial.println(F("(1) Adafruit BMP280 I2C or SPI Barometric Pressure & Altitude Sensor"));
    Serial.println(F("(2) DHT22/11 Humidity and Temperature Sensor"));
    Serial.println(F("(3) LCD 16x2"));
    Serial.println(F("(4) Hazardous Gas  Sensor - MQ-135"));
    Serial.println(F("(5) Water Level Sensor Module"));
    Serial.println(F("(menu) send anything else or press on board reset button\n"));
    while (!Serial.available());

    // Read data from serial monitor if received
    while (Serial.available()) 
    {
        char c = Serial.read();
        if (isAlphaNumeric(c)) 
        {   
            
            if(c == '1') 
    			Serial.println(F("Now Testing Adafruit BMP280 I2C or SPI Barometric Pressure & Altitude Sensor "));
    		else if(c == '2') 
    			Serial.println(F("Now Testing DHT22/11 Humidity and Temperature Sensor"));
    		else if(c == '3') 
    			Serial.println(F("Now Testing LCD 16x2"));
    		else if(c == '4') 
    			Serial.println(F("Now Testing Hazardous Gas  Sensor - MQ-135 "));
    		else if(c == '5') 
    			Serial.println(F("Now Testing Water Level Sensor Module"));
            else
            {
                Serial.println(F("illegal input!"));
                return 0;
            }
            time0 = millis();
            return c;
        }
    }
}
